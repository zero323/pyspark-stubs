# Stubs for pyspark.streaming.context (Python 3.5)
#

from typing import Any, Callable, List, Optional, TypeVar
from pyspark.context import SparkContext
from pyspark.rdd import RDD
from pyspark.storagelevel import StorageLevel
import pyspark.streaming.dstream as dstream
from pyspark.streaming.listener import StreamingListener

T = TypeVar("T")

class StreamingContext:
    def __init__(
        self,
        sparkContext,
        batchDuration: Optional[Any] = ...,
        jssc: Optional[Any] = ...,
    ) -> None: ...
    @classmethod
    def getOrCreate(
        cls, checkpointPath: str, setupFunc: Callable[[], "StreamingContext"]
    ) -> "StreamingContext": ...
    @classmethod
    def getActive(cls) -> "StreamingContext": ...
    @classmethod
    def getActiveOrCreate(
        cls, checkpointPath: str, setupFunc: Callable[[], "StreamingContext"]
    ) -> "StreamingContext": ...
    @property
    def sparkContext(self) -> SparkContext: ...
    def start(self) -> None: ...
    def awaitTermination(self, timeout: Optional[int] = ...) -> None: ...
    def awaitTerminationOrTimeout(self, timeout: int) -> None: ...
    def stop(
        self, stopSparkContext: bool = ..., stopGraceFully: bool = ...
    ) -> None: ...
    def remember(self, duration: int) -> None: ...
    def checkpoint(self, directory) -> None: ...
    def socketTextStream(
        self, hostname: str, port: int, storageLevel: StorageLevel = ...
    ) -> dstream.DStream[str]: ...
    def textFileStream(self, directory: str) -> dstream.DStream[str]: ...
    def binaryRecordsStream(
        self, directory: str, recordLength: int
    ) -> dstream.DStream[bytes]: ...
    def queueStream(
        self,
        rdds: List[RDD[T]],
        oneAtATime: bool = ...,
        default: Optional[RDD[T]] = ...,
    ) -> dstream.DStream[T]: ...
    def transform(
        self, dstreams: List[dstream.DStream[Any]], transformFunc: Callable[..., RDD[T]]
    ) -> dstream.DStream[T]: ...
    def union(self, *dstreams: dstream.DStream[Any]) -> dstream.DStream[Any]: ...
    def addStreamingListener(self, streamingListener: StreamingListener) -> None: ...
