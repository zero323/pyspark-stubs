from typing import Any, Optional

class ExecutorResourceRequest:
    def __init__(self, resourceName: Any, amount: Any, discoveryScript: str = ..., vendor: str = ...) -> None: ...
    @property
    def resourceName(self): ...
    @property
    def amount(self): ...
    @property
    def discoveryScript(self): ...
    @property
    def vendor(self): ...

class ExecutorResourceRequests:
    def __init__(self, _jvm: Optional[Any] = ..., _requests: Optional[Any] = ...) -> None: ...
    def memory(self, amount: Any): ...
    def memoryOverhead(self, amount: Any): ...
    def pysparkMemory(self, amount: Any): ...
    def cores(self, amount: Any): ...
    def resource(self, resourceName: Any, amount: Any, discoveryScript: str = ..., vendor: str = ...): ...
    @property
    def requests(self): ...

class TaskResourceRequest:
    def __init__(self, resourceName: Any, amount: Any) -> None: ...
    @property
    def resourceName(self): ...
    @property
    def amount(self): ...

class TaskResourceRequests:
    def __init__(self, _jvm: Optional[Any] = ..., _requests: Optional[Any] = ...) -> None: ...
    def cpus(self, amount: Any): ...
    def resource(self, resourceName: Any, amount: Any): ...
    @property
    def requests(self): ...
