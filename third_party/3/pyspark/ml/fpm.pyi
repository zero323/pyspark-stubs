# Stubs for pyspark.ml.fpm (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from pyspark.ml.util import *
from pyspark.ml.wrapper import JavaEstimator, JavaModel
from pyspark.ml.param.shared import *

class HasMinSupport(Params):
    minSupport = ...  # type: Any
    def setMinSupport(self, value: float): ...
    def getMinSupport(self) -> float: ...

class HasNumPartitions(Params):
    numPartitions = ...  # type: Any
    def setNumPartitions(self, value: int): ...
    def getNumPartitions(self) -> int: ...

class HasMinConfidence(Params):
    minConfidence = ...  # type: Any
    def setMinConfidence(self, value): ...
    def getMinConfidence(self) -> float: ...

class HasItemsCol(Params):
    itemsCol = ...  # type: Any
    def setItemsCol(self, value): ...
    def getItemsCol(self): ...

class FPGrowthModel(JavaModel, JavaMLWritable, JavaMLReadable):
    @property
    def freqItemsets(self): ...
    @property
    def associationRules(self): ...

class FPGrowth(
    JavaEstimator,
    HasItemsCol,
    HasPredictionCol,
    HasMinSupport,
    HasNumPartitions,
    HasMinConfidence,
    JavaMLWritable,
    JavaMLReadable,
):
    def __init__(
        self,
        *,
        minSupport: float = ...,
        minConfidence: float = ...,
        itemsCol: str = ...,
        predictionCol: str = ...,
        numPartitions: Optional[int] = ...
    ) -> None: ...
    def setParams(
        self,
        *,
        minSupport: float = ...,
        minConfidence: float = ...,
        itemsCol: str = ...,
        predictionCol: str = ...,
        numPartitions: Optional[int] = ...
    ) -> FPGrowth: ...
