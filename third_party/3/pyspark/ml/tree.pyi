from pyspark.ml.param.shared import *
from pyspark.ml.util import *
from pyspark.ml.wrapper import JavaEstimator as JavaEstimator, JavaModel as JavaModel, JavaParams as JavaParams, JavaPredictionModel as JavaPredictionModel, JavaPredictor as JavaPredictor
from typing import Any

class _DecisionTreeModel(JavaPredictionModel):
    @property
    def numNodes(self): ...
    @property
    def depth(self): ...
    @property
    def toDebugString(self): ...
    def predictLeaf(self, value: Any): ...

class _DecisionTreeParams(HasCheckpointInterval, HasSeed, HasWeightCol):
    leafCol: Any = ...
    maxDepth: Any = ...
    maxBins: Any = ...
    minInstancesPerNode: Any = ...
    minWeightFractionPerNode: Any = ...
    minInfoGain: Any = ...
    maxMemoryInMB: Any = ...
    cacheNodeIds: Any = ...
    def __init__(self) -> None: ...
    def setLeafCol(self, value: Any): ...
    def getLeafCol(self): ...
    def getMaxDepth(self): ...
    def getMaxBins(self): ...
    def getMinInstancesPerNode(self): ...
    def getMinWeightFractionPerNode(self): ...
    def getMinInfoGain(self): ...
    def getMaxMemoryInMB(self): ...
    def getCacheNodeIds(self): ...

class _TreeEnsembleModel(JavaPredictionModel):
    @property
    def trees(self): ...
    @property
    def getNumTrees(self): ...
    @property
    def treeWeights(self): ...
    @property
    def totalNumNodes(self): ...
    @property
    def toDebugString(self): ...
    def predictLeaf(self, value: Any): ...

class _TreeEnsembleParams(_DecisionTreeParams):
    subsamplingRate: Any = ...
    supportedFeatureSubsetStrategies: Any = ...
    featureSubsetStrategy: Any = ...
    def __init__(self) -> None: ...
    def getSubsamplingRate(self): ...
    def getFeatureSubsetStrategy(self): ...

class _RandomForestParams(_TreeEnsembleParams):
    numTrees: Any = ...
    def __init__(self) -> None: ...
    def getNumTrees(self): ...

class _GBTParams(_TreeEnsembleParams, HasMaxIter, HasStepSize, HasValidationIndicatorCol):
    stepSize: Any = ...
    validationTol: Any = ...
    def getValidationTol(self): ...

class _HasVarianceImpurity(Params):
    supportedImpurities: Any = ...
    impurity: Any = ...
    def __init__(self) -> None: ...
    def getImpurity(self): ...

class _TreeClassifierParams:
    supportedImpurities: Any = ...
    impurity: Any = ...
    def __init__(self) -> None: ...
    def getImpurity(self): ...

class _TreeRegressorParams(_HasVarianceImpurity): ...
